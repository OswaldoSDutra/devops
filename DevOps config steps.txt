#Creating the CI server
  
*Create EC2 instances (CI-server, APP-server)
	Create ppk key (use putty to connect to the server)  

*Install Java  
	https://www.oracle.com/java/technologies/downloads/  

	Linux: `yum install java-11-openjdk`  

	Create environment variable JAVA_HOME  
		`$ vi ~/.bash_profile

			JAVA_HOME=/usr/lib/jvm/java-11-openjdk			
			PATH=$PATH:$HOME/bin:$JAVA_HOME

			export PATH
		`  
  	
*Install Maven  
	https://maven.apache.org/download.cgi  
  
	Linux:  `yum install maven`    
			OR   
		`wget https://www-us.apache.org/dist/maven/maven-3/3.6.0/binaries/apache-maven-3.6.0-bin.tar.gz
		sudo tar xf /tmp/apache-maven-3.6.0-bin.tar.gz -C /opt`  

	Create environment variable MAVEN_HOME  
		AND  
	Create environment variable M2
    
	$ vi ~/.bash_profile

			JAVA_HOME=/usr/lib/jvm/java-11-openjdk
			MAVEN_HOME=/opt/apache-maven-3.9.3
			M2=/opt/apache-maven-3.9.3/bin
			PATH=$PATH:$HOME/bin:$JAVA_HOME:$MAVEN_HOME:$M2  
  
			export PATH
  
*Install Git
	https://git-scm.com/book/it/v2/Per-Iniziare-Installing-Git  
  
	Linux: `yum install git`

*Install Jenkins
	https://www.jenkins.io/download/  

	`Configure Jenkins server	
		Start Jenkins and unlock via Webbrowser
		Configure: JDK, Maven and Git with the paths of the installations on the server
		Set the app git repository adress
		Set maven goals
		Build (should send the app file to the devops user home on the application server)
	`

#Creating the application server

*Configure tomcat using a docker image
	1. using the root user install docker
		`yum install docker`
	2. give permission to the devops user on the docker group  
		`usermod -aG docker ec2-user`
	3. from the devops user home start docker
		`sudo service docker start`
	4. download tomcat image
		`docker pull tomcat:latest`
	5. create tomcat container
		`docker run -d -p 8080:8080 --name [container-name] tomcat:latest`
	6. log into the container
		`docker exec -it [container-name] /bin/bash`
	7. copy the contents of webapps.dist to webapps
		Â´cd /usr/local/tomcat/webapps.dist`
		 cp -r ./* /usr/local/tomcat/webapps` 
	8. from the devops user folder on the server, copy the app files to the container folder
		`exit`
		`sudo docker cp [file to copy] [container-name]:/usr/local/tomcat/webapps`
	9. access the application server via browser to check tha the app is runing.

#Using Ansible to automate application server configuration
	1. install Python
		`yum install python`

	2. install Ansible using pip
		`pip install Ansible`
	3. create Ansible playbook

`
---
- hosts: all
  tasks:
  - name: Copy file Dockerfile
    src: Dockerfile
    dest: .
  
  - name: Copy app file
    src: webapp.war
    dest: .
    
  - name: Stop container
    command: docker stop app-container
    ignore_errors: True
    
  - name: Remove container
    command: docker rm app-container
    ignore_errors: True
    
  - name: Remove container image
    command: docker rmi app-image
    ignore_errors: True  

  - name: Create container image from Dockerfile
    command: docker build -t app-image . 
    
  - name: Create container from image
    command: docker run -d -p 8080:8080 --name app-container app-image
		
`

	4. create a hosts file in the machine
	5. execute playbook
		`ansible-playbook -i [path-to-hosts-file] [path-to-playbook-file] --limit [user]@[ip-host]
	6. configure Jenkins to execute ansible-playbook
		
